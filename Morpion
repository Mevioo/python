import tkinter as tk
from tkinter import messagebox
import socket
import threading

# Paramètres globaux
current_player = "X"
player1_symbol = "X"
player2_symbol = "O"
board = [["-" for _ in range(3)] for _ in range(3)]
server_socket = None

# Connexion au serveur
SERVER_HOST = "192.168.55.242"  # Adresse IP du serveur
SERVER_PORT = 12345

# Fonction pour établir la connexion au serveur
def connect_to_server():
    global server_socket
    try:
        server_socket = socket.create_connection((SERVER_HOST, SERVER_PORT))
        threading.Thread(target=listen_to_server, daemon=True).start()
        messagebox.showinfo("Connexion réussie", "Connecté au serveur !")
    except Exception as e:
        messagebox.showerror("Erreur", f"Impossible de se connecter au serveur : {e}")

# Écoute les messages du serveur
def listen_to_server():
    global board, current_player
    try:
        while True:
            message = server_socket.recv(1024).decode()
            if message:
                x, y, symbol = message.split(",")
                x, y = int(x), int(y)
                board[x][y] = symbol
                buttons[x][y].config(text=symbol)
                current_player = player2_symbol if symbol == player1_symbol else player1_symbol
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur de synchronisation : {e}")

# Fonction pour faire un coup
def make_move(x, y):
    global current_player, board
    if board[x][y] == "-":
        board[x][y] = current_player
        buttons[x][y].config(text=current_player)

        if server_socket:
            try:
                server_socket.sendall(f"{x},{y},{current_player}".encode())
            except Exception as e:
                messagebox.showerror("Erreur", f"Échec d'envoi au serveur : {e}")

        if check_winner():
            messagebox.showinfo("Fin de partie", f"Le joueur {current_player} a gagné !")
            reset_game()
            return

        current_player = player2_symbol if current_player == player1_symbol else player1_symbol
    else:
        messagebox.showwarning("Coup invalide", "Cette case est déjà occupée !")

# Réinitialise le jeu
def reset_game():
    global current_player, board
    board = [["-" for _ in range(3)] for _ in range(3)]
    for i in range(3):
        for j in range(3):
            buttons[i][j].config(text="-")
    current_player = player1_symbol

# Vérifie si un joueur a gagné
def check_winner():
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != "-":
            return True
        if board[0][i] == board[1][i] == board[2][i] != "-":
            return True
    if board[0][0] == board[1][1] == board[2][2] != "-":
        return True
    if board[0][2] == board[1][1] == board[2][0] != "-":
        return True
    return False

# Interface graphique
root = tk.Tk()
root.title("Jeu de Morpion")

# Labels pour les joueurs
label_joueur1 = tk.Label(root, text="Joueur 1 [X]", font=("Arial", 14))
label_joueur1.grid(row=0, column=0, columnspan=2)
label_joueur2 = tk.Label(root, text="Joueur 2 [O]", font=("Arial", 14))
label_joueur2.grid(row=0, column=2, columnspan=2)

# Grille de boutons
buttons = [[None for _ in range(3)] for _ in range(3)]
for i in range(3):
    for j in range(3):
        buttons[i][j] = tk.Button(
            root,
            text="-",
            font=("Arial", 24),
            width=5,
            height=2,
            command=lambda x=i, y=j: make_move(x, y)
        )
        buttons[i][j].grid(row=i+1, column=j)

# Bouton de connexion au serveur
connect_button = tk.Button(root, text="Se connecter au serveur", font=("Arial", 14), command=connect_to_server)
connect_button.grid(row=5, column=0, columnspan=3)

# Bouton de remise à zéro
reset_button = tk.Button(root, text="Remise à zéro", font=("Arial", 14), command=reset_game)
reset_button.grid(row=6, column=0, columnspan=3)

# Lancer l'application
root.mainloop()
